0 - никаких прав;
1 - только выполнение;
2 - только запись;
3 - выполнение и запись;
4 -  только чтение;
5 - чтение и выполнение;
6 - чтение и запись;
7 - чтение запись и выполнение.
https://kubernetes.io/ru/docs/reference/kubectl/cheatsheet/
kubectl expose pod prometheus -n stage --type=NodePort --name=prometheus-service
kubectl expose pod grafana -n stage --type=NodePort --name=grafana-service
kubectl label pod k8s-nginx pod-role.kubernetes.io/lbl-k8s-nginx=l1-k8s-nginx
kubectl expose pod k8s-mysql --type=NodePort --name=mysql-service
kubectl expose deployment frontend -n stage --type=NodePort --name=frontend-service
kubectl expose pod frontend -n stage --type=NodePort --name=frontend-service
kubectl exec k8s-nginx -it -- bash
/usr/share/nginx/html
kubectl get all -n ingress-nginx
kubectl set image deployment/frontend nginx=murinvit/nginx:ver2 -n stage
docker image tag server:latest myname/server:lates
kubectl api-versions
kubectl get pvc

Астахов:
--------------------------------
kubectl expose deployment frontend --port=80 --type=ClusterIP -n stage
kubectl get services -n stage -o wide
--------------------------------
--------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: mysql-pass
type: Opaque
data:
  password: YWRtaW4=
EOF
--------------------------------
Deployment:
--------------------------------
kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: fronend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fronend
  template:
    metadata:
      labels:
        app: fronend
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
EOF
--------------------------------
Pod:
--------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: k8s-mysql
  labels:
    name: lbl-k8s-mysql
spec:
  containers:
  - name: mysql
    image: mysql:latest
    env:
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mysql-pass
          key: password
    ports:
    - name: mysql
      containerPort: 3306
      protocol: TCP
    volumeMounts:
    - name: k8s-mysql-storage
      mountPath: /var/lib/mysql
  volumes:
  - name: k8s-mysql-storage
    emptyDir: {}
EOF
---------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: k8s-nginx
  labels:
    name: lbl-k8s-nginx
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - name: nginx
      containerPort: 80
      protocol: TCP
EOF
---------------------------------
Services:
---------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  labels:
    name: lbl-mysql-service
spec:
  ports:
  - port: 3306
  selector:
    name: lbl-mysql-service
  type: ClusterIP
EOF
--------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  labels:
    name: nginx-service
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: nginx-service
  type: NodePort
EOF
-------------------------------
-------------------------------
cat << EOF > index.html
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>Пример веб-страницы</title>
 </head>
 <body>
  <h1>Заголовок</h1>
  <!-- Комментарий -->
  <p>Первый абзац.</p>
  <p>Второй абзац.</p>
 </body>
</html>
EOF
-------------------------------
Ingress-rule:
-------------------------------
kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-hosts
spec:
  rules:
  - host: wd4.ru
    http:
      paths:
       - path: /
         pathType: Prefix
         backend:
           service: 
              name: frontend
              port:
                number: 80
EOF
--------------------------------
PersistentVolume NFS:
--------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-nfs-share
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    server: 10.10.1.111
    path: /var/nfs
EOF
--------------------------------
PersistentVolumeClaim NFS:
--------------------------------
kubectl apply -f - <<EOF
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: fileshare
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
EOF
---------------------------------
---------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: k8s-mysql
  labels:
    name: lbl-k8s-mysql
spec:
  containers:
  - name: mysql
    image: mysql:latest
    env:
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mysql-pass
          key: password
    ports:
    - name: mysql
      containerPort: 3306
      protocol: TCP
    volumeMounts:
    - name: k8s-mysql-storage
      mountPath: /var/lib/
  volumes:
  - name: k8s-mysql-storage
    persistentVolumeClaim:
      claimName: fileshare
EOF
----------------------------------
Prometheus Pod:
----------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: prometheus
  labels:
    name: lbl-prometheus
spec:
  containers:
  - name: prometheus
    image: murzinvit/prometheus:ver1
    ports:
    - name: prometheus
      containerPort: 9090
      protocol: TCP
    volumeMounts:
    - name: prometheus-storage
      mountPath: /mnt
  volumes:
  - name: prometheus-storage
    persistentVolumeClaim:
      claimName: fileshare
EOF
-----------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: grafana
  labels:
    name: lbl-grafana
spec:
  containers:
  - name: grafana
    image: murzinvit/grafana:ver1
    ports:
    - name: grafana
      containerPort: 3000
      protocol: TCP
EOF
-----------------------------------
Netology application with pod:
-----------------------------------

kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: frontend
  labels:
    name: frontend
spec:
  containers:
  - name: frontend
    image: murzinvit/frontend:latest
    imagePullPolicy: IfNotPresent
    ports:
    - name: frontend
      containerPort: 8000
      protocol: TCP
---
apiVersion: v1
kind: Pod
metadata:
  name: db
  labels:
    name: db
spec:
  containers:
  - name: db
    image: murzinvit/db:latest
    imagePullPolicy: IfNotPresent
    ports:
    - name: db
      containerPort: 3306
      protocol: TCP
---
apiVersion: v1
kind: Pod
metadata:
  name: backend
  labels:
    name: backend
spec:
  containers:
  - name: backend
    image: murzinvit/backend:latest
    imagePullPolicy: IfNotPresent
    ports:
    - name: backend
      containerPort: 9000
      protocol: TCP
EOF
------------------------------------
kubectl expose deployment frontend -n stage --type=NodePort --name=frontend-service
------------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: frontend
  labels:
    name: frontend
spec:
  containers:
  - name: frontend
    image: murzinvit/frontend:latest
    imagePullPolicy: IfNotPresent
    ports:
    - name: frontend
      containerPort: 8000
      protocol: TCP
---
apiVersion: v1
kind: Pod
metadata:
  name: db
  labels:
    name: db
spec:
  containers:
  - name: db
    image: murzinvit/db:latest
    imagePullPolicy: IfNotPresent
    ports:
    - name: db
      containerPort: 3306
      protocol: TCP
---
apiVersion: v1
kind: Pod
metadata:
  name: backend
  labels:
    name: backend
spec:
  containers:
  - name: backend
    image: murzinvit/backend:latest
    imagePullPolicy: IfNotPresent
    ports:
    - name: backend
      containerPort: 9000
      protocol: TCP
EOF
------------------------------------
Netology run app in deployment:
------------------------------------
kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    name: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      name: frontend
  template:
    metadata:
      labels:
        name: frontend
    spec:
      containers:
      - name: fronend
        image: murzinvit/frontend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: stage
  labels:
    name: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      name: backend
  template:
    metadata:
      labels:
        name: backend
    spec:
      containers:
      - name: backend
        image: murzinvit/backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9000
---
apiVersion: v1
kind: Pod
metadata:
  name: db
  namespace: stage
  labels:
    name: db
spec:
  containers:
  - name: db
    image: murzinvit/db:latest
    imagePullPolicy: IfNotPresent
    ports:
    - name: db
      containerPort: 3306
      protocol: TCP
    volumeMounts:
    - name: db-storage
      mountPath: /var/lib/
  volumes:
  - name: db-storage
    persistentVolumeClaim:
      claimName: fileshare
EOF
--------------------------------
netology aap run in 1 pod:
--------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: frontend
  namespace: stage
  labels:
    name: frontend
spec:
  containers:
  - name: frontend
    image: murzinvit/frontend:latest
    imagePullPolicy: IfNotPresent
    ports:
    - name: frontend
      containerPort: 8000
      protocol: TCP
---
apiVersion: v1
kind: Pod
metadata:
  name: db
  namespace: stage
  labels:
    name: db
spec:
  containers:
  - name: db
    image: murzinvit/db:latest
    imagePullPolicy: IfNotPresent
    ports:
    - name: db
      containerPort: 3306
      protocol: TCP
---
apiVersion: v1
kind: Pod
metadata:
  name: backend
  namespace: stage
  labels:
    name: backend
spec:
  containers:
  - name: backend
    image: murzinvit/backend:latest
    imagePullPolicy: IfNotPresent
    ports:
    - name: backend
      containerPort: 9000
      protocol: TCP
EOF
------------------------------
In 1 pod
------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: netology-devops6-app
  namespace: stage
spec:
  restartPolicy: Never
  volumes:
  - name: db-storage
    persistentVolumeClaim:
      claimName: fileshare
  containers:
  - name: backend
    image: murzinvit/backend:latest
    imagePullPolicy: IfNotPresent
  - name: db
    image: murzinvit/db:latest
    imagePullPolicy: IfNotPresent
    volumeMounts:
    - name: db-storage
      mountPath: /var/lib/
  - name: frontend
    image: murzinvit/frontend:latest
    imagePullPolicy: IfNotPresent
EOF
---------------------------------
kubectl apply -f - <<EOF
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: zookeeper
spec:
  selector:
    matchLabels:
      app: zookeeper
  replicas: 1
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - env:
        - name: ZOOKEEPER_SERVERS
          value: "1"
        image: "komljen/zookeeper:3.4.10"
        imagePullPolicy: IfNotPresent
        name: zookeeper
        ports:
        - containerPort: 2181
          name: client
        volumeMounts:
        - mountPath: /data
          name: zookeeper-data
      restartPolicy: Always
      volumes:
      - name: zookeeper-data
        persistentVolumeClaim:
          claimName: zookeeper-vol- containerPort: 9000
EOF
----------------------------------------
kubectl apply -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  labels:
    name: nginx-pod-lbl
spec:
  containers:
  - name: nginx
    image: nginx:latest
    imagePullPolicy: IfNotPresent
    ports:
    - name: nginx
      containerPort: 80
      protocol: TCP
    volumeMounts:
    - name: nginx-store
      mountPath: /etc/nginx
    volumeMounts:
    - name: html-store
      mountPath: /usr/share/nginx/html
  volumes:
  - name: nginx-store
    persistentVolumeClaim:
       claimName: nginx-store
  volumes:
  - name: html-store
    persistentVolumeClaim:
       claimName: html-store
EOF
----------------------------------------

kubectl apply -f - <<EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-html-volume
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    server: 10.10.1.226
    path: /var/html_vol
EOF
-----------------------------------------
kubectl apply -f - <<EOF
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: html-store
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  volumeName: nginx-html-volume
EOF
----------------------------------------

